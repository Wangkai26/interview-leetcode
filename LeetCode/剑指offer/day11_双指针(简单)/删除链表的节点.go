// 题目链接：https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/?envType=study-plan&id=lcof
// day11/31
// 第 11 天主题为：双指针（简单）
// 包含两道题目：
// 剑指offer18.删除链表的节点
// 剑指offer22.链表中倒数第k个节点

package main

//思路很简单的题目，就是要注意代码的鲁棒性
//链表相关的题目非常考察代码的鲁棒性，谨防访问空节点.Next 这种情况的发生。

//要删除某个节点，我们需要记录要删除节点的前一个节点，将前一个节点的 Next域 指向要删除节点的下一个节点，
//所以我们要保存要删除节点的前一个节点，才能做到删除节点。
//cur=head，一次遍历链表，遍历条件为 cur.Next != nil，如果 cur.Next 是我们要删除的节点，
//cur.Next = cur.Next.Next，然后结束遍历，否则 cur=cur.Next，向后移动节点。最后返回 head。

//有一种情况需要额外判断，就是 head 节点就是要删除的节点，因为我们无法保存该节点的前一个节点，
//针对这种情况，直接返回 head.Next 即可
//在遍历之前，我们就要对这种情况进行判断。

//Definition for singly-linked list.
type ListNode struct {
    Val int
    Next *ListNode
}

func deleteNode(head *ListNode, val int) *ListNode {
	if head.Val == val{
		return head.Next
	}
	cur := head
	for cur.Next != nil{
		if cur.Next.Val == val{
			cur.Next = cur.Next.Next
			// 跳出是为了应对要删除的节点为链表最后一个，会造成访问空指针的情况出现
			break
		}
		cur = cur.Next
	}
	return head
}

//稍微来扩展一下，对应《剑指offer》
//
//如果题目给的是一个链表的头指针 和 一个要被删除的节点，而非节点的值。那我们应该如何处理呢？
//按照如上时间复杂度O(n)的思路当然是可以的，那是不是一定需要找到被删除节点的前一个节点呢？
//答案是否定的，我们可以很方便地找到要删除的节点的下一个节点。如果我们把下一个节点的内容复制到被删除节点上来覆盖该节点原有的内容，再把下一个节点删除，那是不是就相当于把需要删除的节点删除了？

//（这个思路很新奇，在用户的需求中，删除节点的意思就是删除节点值，而非内存空间，要抓住这样的需求和抽象层析的信息不对称来寻求突破）

//上述思路还有一个问题：如果被删除的节点位于链表的尾部，Next域为空，就无法使用了，在这种情况下，我们只能遍历链表，得到该节点的前一个节点，将该节点删除。
//值得注意的是：上述代码仍然不是一段完美的代码，因为它基于这样一种假设：要删除的节点确定在链表中。我们需要O(n)的时间才能判断链表是否包含某一节点。
//在面试的过程中，我们可以和面试官讨论这个假设，这样面试官就会觉得我们考虑问题非常全面。
//
//考察点：
//- 应聘者对链表的编程能力
//- 创新思维能力，这需要应聘者打破常规思维模式。当我们想要删除某一节点时，不一定要删除节点本身，可以先把下一个节点的内容复制出来覆盖要被删除节点的内容，再将下一个节点删除，这种思路不容易想到
//- 代码的鲁棒性，也即应聘者思维的全面性，全面考虑到该节点是链表尾结点或头结点的情况。