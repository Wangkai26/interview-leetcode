//题目链接：https://leetcode.cn/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/?envType=study-plan&id=lcof
// day21/31
// 第 21 天主题为：位运算（简单）
// 包含两道题目：
// 剑指offer15.二进制中1的个数
// 剑指offer65.不用加减乘除做加法
package main

//解题思路：位运算（参考自官方题解）
//其实主要就是处理好进位
//
//首先，考虑两个二进制位相加的四种情况如下：
//0 + 0 = 0
//0 + 1 = 1
//1 + 0 = 1
//1 + 1 = 0 (进位)
//可以发现，对于整数 a 和 b：
//在不考虑进位的情况下，其无进位加法结果为 a ^ b。
//而所有需要进位的位为 a & b，进位后的进位结果为 a & b << 1。
//
//so，我们可以将 a+b 的和拆解为 无进位的和 与 进位结果 的和。
//在代码中，我们可以直接将 b 看做进位结果的和进行处理，之后不断进行求 无进位加法结果 和 进位结果 的过程，
//将进位结果赋值给 b，直至进位结果等于 0，说明加法结束，返回 a 即可。

func add(a int, b int) int {
	for b != 0{
		carry := (a & b) << 1
		a ^= b
		b = carry
	}
	return a
}